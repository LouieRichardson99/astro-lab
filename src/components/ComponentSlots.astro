---
import type { ComponentData } from '../types';

interface Props {
  component: ComponentData;
}

const { component } = Astro.props;
---

<component-slots data-component-id={component.id}>
  <table class="component-slots">
    <thead>
      <tr>
        <th class="slot-name-column">Slot</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      {
        component.schema.slots.map((slot) => (
          <tr>
            <td class="slot-name-column">
              <pre class="slot-name">{slot.name}</pre>
            </td>
            <td class="slot-value-column">
              <input
                type="text"
                value={component.content.slots[slot.name]}
                name={slot.name}
              />
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>
</component-slots>

<style>
  .slot-name-column {
    min-width: max-content;
    min-width: 20rem;
  }

  .slot-value-column {
    width: 100%;
  }

  .slot-name {
    font-size: 1.4rem;
  }
</style>

<script>
  import { updateComponentContent } from '../services/component-content';

  class ComponentSlots extends HTMLElement {
    connectedCallback() {
      const inputs = this.querySelectorAll('input');

      inputs.forEach((input) => {
        input.addEventListener('change', async (event: Event) => {
          let value = (event.target as HTMLInputElement).value.trim();
          const name = (event.target as HTMLInputElement).name;

          await updateComponentContent(
            this.dataset.componentId || '',
            'slot',
            name,
            value
          );

          document.dispatchEvent(new Event('component-updated'));
        });
      });
    }
  }

  customElements.define('component-slots', ComponentSlots);
</script>
