---
import BottomDrawerIcon from '../icons/bottom-drawer.svg?raw';
import HashIcon from '../icons/hash.svg?raw';
import ZoomInIcon from '../icons/zoom-in.svg?raw';
import ZoomOutIcon from '../icons/zoom-out.svg?raw';
import RefreshIcon from '../icons/refresh.svg?raw';
import ScaleIcon from '../icons/scale.svg?raw';
import Dropdown from './Dropdown.astro';

interface Props {
  componentPath: string;
  hasControlPanel: boolean;
}

const { componentPath, hasControlPanel } = Astro.props;
---

<div class="control-bar">
  {
    hasControlPanel && (
      <button
        class="icon-button"
        aria-label="Toggle component controls"
        data-action="toggle-controls"
      >
        <Fragment set:html={BottomDrawerIcon} />
      </button>
    )
  }
  <button
    class="icon-button"
    aria-label="Toggle grid"
    data-action="toggle-grid"
  >
    <Fragment set:html={HashIcon} />
  </button>
  <span class="spacer"></span>
  <button class="icon-button" aria-label="Zoom in" data-action="zoom-in">
    <Fragment set:html={ZoomInIcon} />
  </button>
  <button class="icon-button" aria-label="Zoom out" data-action="zoom-out">
    <Fragment set:html={ZoomOutIcon} />
  </button>
  <button class="icon-button" aria-label="Reset zoom" data-action="zoom-reset">
    <Fragment set:html={RefreshIcon} />
  </button>
  <span class="spacer"></span>
  <Dropdown dropdownButtonSvg={ScaleIcon} label="Toggle device options">
    <Fragment>
      <button class="device-button" data-device="mobile">Mobile</button>
      <button class="device-button" data-device="tablet">Tablet</button>
      <button class="device-button" data-device="desktop">Desktop</button>
      <button class="device-button" data-device="auto">Auto</button>
    </Fragment>
  </Dropdown>
  {
    componentPath && (
      <a href={`vscode://file/${componentPath}`} class="file-path-link">
        <pre class="file-path">{componentPath}</pre>
      </a>
    )
  }
</div>

<style lang="scss">
  .control-bar {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    border-bottom: 1px solid var(--border-color);
    padding: 0 1.5rem;
    height: var(--control-bar-height);
  }

  .spacer {
    width: 1rem;
  }

  .device-button {
    background: none;
    border: none;
    color: var(--color);
    padding: 0.5rem 2rem 0.5rem 1rem;
    font-size: 1.2rem;
    text-align: left;
    width: 100%;
    cursor: pointer;
    overflow: hidden;
    transition: background-color var(--global-animation-speed) ease;

    &:hover,
    &:focus {
      background-color: hsl(0, 0%, 95%);
    }
  }

  .file-path-link {
    color: color-mix(in srgb, var(--color), hsl(0, 0%, 80%));
    text-decoration: none;
    margin-left: auto;
    transition: color var(--global-animation-speed) ease;

    &:hover,
    &:focus {
      color: var(--color);
    }
  }

  .file-path {
    font-size: 1rem;
    color: inherit;
    margin: 0;
  }
</style>

<script>
  const controlButtons = document.querySelectorAll('button[data-action]');
  const deviceButtons = document.querySelectorAll('.device-button');
  const componentViewer = document.querySelector(
    '.component-viewer'
  ) as HTMLElement;

  deviceButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const device = button.getAttribute('data-device');
      const dropdown = button.closest('.dropdown-content');
      const dropdownButton =
        dropdown?.previousElementSibling as HTMLButtonElement;

      dropdown?.classList.remove('open');
      dropdown?.setAttribute('aria-hidden', 'true');
      dropdownButton?.setAttribute('aria-expanded', 'false');
      dropdownButton?.focus();

      componentViewer.style.backgroundColor = 'hsl(0, 0%, 90%)';

      document
        .querySelector('iframe')
        ?.classList.remove('mobile', 'tablet', 'desktop');

      if (device !== 'auto') {
        document.querySelector('iframe')?.classList.add(device!);
      }
    });
  });

  controlButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const action = button.getAttribute('data-action');
      document.dispatchEvent(new CustomEvent(action!));
    });
  });
</script>
