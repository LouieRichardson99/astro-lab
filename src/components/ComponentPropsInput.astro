---
import type { PropInfo } from '../types';
import isPrimitiveUnion from '../utils/isPrimitiveUnion';
import JsonEditor from './JsonEditor.astro';

export interface Props {
  prop: PropInfo;
  value: unknown;
  componentId: string;
}

const { prop, value, componentId } = Astro.props;
const { type } = prop;
---

<component-props-input data-component-id={componentId}>
  {
    isPrimitiveUnion(type) && (
      <fieldset>
        <legend class="sr-only">Select {prop.name} value:</legend>
        <div class="radio-group">
          {type.types.map((t) => (
            <label>
              {t.name}
              <input
                type="radio"
                name={prop.name}
                value={t.name}
                checked={value === t.name}
              />
            </label>
          ))}
        </div>
      </fieldset>
    )
  }

  {
    type.kind === 'primitive' && (
      <Fragment>
        {type.name === 'string' && (
          <Fragment>
            <label for={prop.name} class="sr-only">
              {prop.name}
            </label>
            <input
              type="text"
              value={value as string}
              name={prop.name}
              id={prop.name}
            />
          </Fragment>
        )}
        {type.name === 'number' && (
          <Fragment>
            <label for={prop.name} class="sr-only">
              {prop.name}
            </label>
            <input
              type="number"
              value={value as number}
              name={prop.name}
              id={prop.name}
            />
          </Fragment>
        )}
        {type.name === 'boolean' && (
          <label class="toggle-switch">
            <span class="sr-only">{prop.name}</span>
            <input
              type="checkbox"
              class="toggle-switch__checkbox"
              checked={Boolean(value)}
              name={prop.name}
              role="switch"
            />
            <span class="toggle-switch__slider" aria-hidden="true" />
          </label>
        )}
      </Fragment>
    )
  }

  {
    (type.kind === 'array' || type.kind === 'object') && (
      <JsonEditor
        componentId={componentId}
        value={value}
        type={type.kind}
        name={prop.name}
      />
    )
  }

  {type.kind === 'unknown' && <span>Unknown type</span>}
</component-props-input>

<script>
  import { updateComponentContent } from '../services/component-content';

  class ComponentPropsInput extends HTMLElement {
    connectedCallback() {
      const inputs = this.querySelectorAll('input, select');

      inputs.forEach((input) => {
        input.addEventListener('change', (event: Event) => {
          const target = event.target as HTMLInputElement | HTMLSelectElement;
          const name = target.name;
          let value: any;

          if (target.type === 'checkbox') {
            value = target.checked;
          } else {
            value = (
              target as HTMLInputElement | HTMLSelectElement
            ).value.trim();

            try {
              value = JSON.parse(value);
            } catch {} // Keep string value
          }

          this.#updateComponent(name, value);
        });
      });
    }

    async #updateComponent(name: string, value: any) {
      await updateComponentContent(
        this.dataset.componentId || '',
        'prop',
        name,
        value
      );

      document.dispatchEvent(new Event('component-updated'));
    }
  }

  customElements.define('component-props-input', ComponentPropsInput);
</script>
